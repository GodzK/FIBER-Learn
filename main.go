package main

import (
	"log"
	"os"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/template/html/v2"
	"github.com/joho/godotenv"
)

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®struct
type Book struct {
	//‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° metadata ‡∏à‡∏≤‡∏Åjson: ""
	ID     int    `json:"id"`
	Title  string `json:"title"`
	Author string `json:"author"`
}

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£save‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
var books []Book

func main() {
	//handle error for loading dotenv
	if err := godotenv.Load(); err != nil {
		log.Fatal("load .env error")
	}
	//view‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏ß‡∏Åhtml ‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÑ‡∏î‡πâ ‡∏™‡∏°‡∏±‡∏¢‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß
	engine := html.New("./views", ".html")
	// app ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡πÄ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ app = express()
	app := fiber.New(fiber.Config{
		Views: engine,
	})
	books = append(books, Book{ID: 1, Title: "Phakaphol", Author: "Phakaphol"})
	books = append(books, Book{ID: 2, Title: "Pheeraphat", Author: "Phakaphol"})
	//Make 1st Api for response all data || getBooks‡πÄ‡∏â‡∏¢‡πÜ‡∏à‡∏∞bypass ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Åfunction‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ feel JS
	app.Get("/books", getBooks)
	//with params
	app.Get("/books/:id", getBook)
	//test html
	app.Get("/test-html", testHTML)
	app.Get("/config", getENV)
	app.Post("/books", createBook)
	app.Post("/upload", uploadFile)
	app.Put("/books/:id", updateBook)
	app.Delete("/books/:id", deleteBook)
	app.Listen(":8080")
}

// that fireüî•
func uploadFile(c *fiber.Ctx) error {
	//key image
	file, err := c.FormFile("image")
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString(err.Error())
	}
	// Save file ‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ñ‡∏∑‡∏≠ 1.file 2. relative path (‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà /)
	err = c.SaveFile(file, "./uploads/"+file.Filename)
	//internal server error ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤server‡∏í‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString(err.Error())
	}
	return c.SendString("file upload complete !")
}
func testHTML(c *fiber.Ctx) error {
	//index‡πÉ‡∏ô‡∏ï‡∏≥‡πÄ‡πÄ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏£‡∏∞‡∏ö‡∏∏path‡πÑ‡∏ß‡πâ
	return c.Render("index", fiber.Map{
		//key balue
		"Title": "Hello , World!",
	})
}
func getENV(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{
		"SECRET": os.Getenv("SECRET"),
	})
}
